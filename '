import { RefObject, useEffect, useState } from "react";

type Props = {
  dragRef: RefObject<HTMLImageElement | HTMLElement>;
  cloneRef: RefObject<HTMLElement>;
  wrapperRef: RefObject<HTMLElement>;
};

const useTouch = ({ dragRef, cloneRef }: Props) => {
  const [position, setPosition] = useState({
    x: 0,
    y: 0,
  });
  const [beforeOverElementId, setBeforeOverElementId] = useState<string>("");
  const [currentOverElementId, setCurrentOverElementId] = useState<string>("");

  const createCloneWizard = () => {
    const wizardCloneWrapper = document.getElementById("wizard-clone-wrapper");
    wizardCloneWrapper.classList.remove("hidden");

    const cloneImg = document
      .getElementById("wizard")
      .cloneNode(true) as HTMLImageElement;

    cloneImg.id = "cloneImg";
    cloneImg.style.width = "120px";
    cloneImg.style.height = "80px";

    cloneImg.classList.add("absolute");
    wizardCloneWrapper.append(cloneImg);
  };

  const handleTouchStart = (e: TouchEvent) => {
    e.preventDefault();
    e.stopPropagation();
    document.body.style.touchAction = "none";
    document.body.classList.add("overflow-hidden");

    setPosition({
      x: dragRef.current.offsetLeft,
      y: dragRef.current.offsetTop,
    });

    createCloneWizard();
  };

  const handleTouchMove = (e: TouchEvent) => {
    const touch = e.touches[0];

    setPosition({
      x: touch.clientX - cloneRef.current!.offsetWidth / 2,
      y: touch.clientY - cloneRef.current!.offsetHeight / 2,
    });

    const touchOverElement = document
      .elementsFromPoint(touch.clientX, touch.clientY)
      .find((ele) => ele.nodeName === "LI");

    if (touchOverElement) {
      setCurrentOverElementId(touchOverElement.id);
      setBeforeOverElementId(touchOverElement.id);
    } else {
      setCurrentOverElementId("");
    }
  };

  const handleTouchEnd = (e: TouchEvent) => {
    const target = document
      .elementsFromPoint(
        e.changedTouches[0].clientX,
        e.changedTouches[0].clientY
      )
      .find((ele) => ele.nodeName === "LI") as HTMLElement;

    if (target) {
      console.log("터치엔드");
      target.dataset.over = "false";
      target.classList.add("h-96");
      target.dataset.dragCache = "full";
    }

    const wizardCloneWrapper = document.getElementById("wizard-clone-wrapper");
    wizardCloneWrapper.classList.add("hidden");

    const cloneImg = document.getElementById("cloneImg");
    wizardCloneWrapper.removeChild(cloneImg);

    setPosition({
      x: dragRef.current.offsetLeft,
      y: dragRef.current.offsetTop,
    });

    document.body.classList.remove("overflow-hidden");
    document.body.style.touchAction = "auto";
  };

  if (currentOverElementId) {
    console.log("호버추가");
    document.getElementById(currentOverElementId).dataset.over = "true";
  } else if (currentOverElementId !== beforeOverElementId) {
    console.log("호버삭제");
    document.getElementById(beforeOverElementId).dataset.over = "false";
  }

  useEffect(() => {
    dragRef.current.addEventListener("touchstart", handleTouchStart, {
      passive: false,
    });
    dragRef.current.addEventListener("touchmove", handleTouchMove, {
      passive: false,
    });
    dragRef.current.addEventListener("touchend", handleTouchEnd, {
      passive: false,
    });
  }, []);

  return position;
};

export default useTouch;
